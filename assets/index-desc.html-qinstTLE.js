import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as r}from"./app-BQ0XmfeK.js";const o={};function s(e,l){return r(),t("div",null,[...l[0]||(l[0]=[n('<p>如果专门写一本 <strong>《RPC 框架：从入门到精通》</strong> 的书，可以分为 <strong>基础概念 → 手写实现 → 常见框架 → 高级特性 → 实践案例 → 未来发展</strong> 六个大模块。下面给你一个详细的章节目录：</p><hr><h1 id="《rpc-框架-从入门到精通》目录" tabindex="-1"><a class="header-anchor" href="#《rpc-框架-从入门到精通》目录"><span><strong>《RPC 框架：从入门到精通》目录</strong></span></a></h1><h2 id="第一部分-基础篇-走进-rpc" tabindex="-1"><a class="header-anchor" href="#第一部分-基础篇-走进-rpc"><span><strong>第一部分 基础篇：走进 RPC</strong></span></a></h2><ol><li><p><strong>什么是 RPC？</strong></p><ul><li>RPC 的定义与作用</li><li>与本地调用的区别</li><li>RPC vs REST vs gRPC 对比</li><li>为什么微服务必须依赖 RPC</li></ul></li><li><p><strong>RPC 的核心组成</strong></p><ul><li>客户端与服务端模型</li><li>序列化与反序列化</li><li>网络通信协议</li><li>服务发现与负载均衡</li></ul></li><li><p><strong>RPC 的应用场景</strong></p><ul><li>分布式系统中的位置</li><li>电商、支付、日志、推荐中的实践</li><li>什么时候适合用 RPC，什么时候用 MQ 或 REST</li></ul></li></ol><hr><h2 id="第二部分-实战篇-从零实现一个-rpc-框架" tabindex="-1"><a class="header-anchor" href="#第二部分-实战篇-从零实现一个-rpc-框架"><span><strong>第二部分 实战篇：从零实现一个 RPC 框架</strong></span></a></h2><ol start="4"><li><p><strong>基础网络通信</strong></p><ul><li>Socket 编程实现远程调用</li><li>阻塞 IO / NIO / Netty 基础</li><li>使用 Netty 封装请求和响应</li></ul></li><li><p><strong>序列化与协议设计</strong></p><ul><li>常见序列化方式：Java 序列化、JSON、Protobuf、Hessian</li><li>自定义协议头设计（魔数、版本号、请求 ID）</li><li>序列化方式对性能的影响</li></ul></li><li><p><strong>动态代理与服务调用</strong></p><ul><li>JDK 动态代理实现远程调用</li><li>CGLIB 与字节码增强</li><li>调用链设计</li></ul></li><li><p><strong>服务注册与发现</strong></p><ul><li>Zookeeper 实现服务注册</li><li>Nacos/Consul/Eureka 实现服务发现</li><li>客户端负载均衡策略（随机、轮询、一致性哈希）</li></ul></li><li><p><strong>容错与高可用设计</strong></p><ul><li>超时控制、重试机制</li><li>熔断与降级（参考 Hystrix、Resilience4j）</li><li>服务限流</li></ul></li></ol><hr><h2 id="第三部分-框架篇-主流-rpc-框架深度解析" tabindex="-1"><a class="header-anchor" href="#第三部分-框架篇-主流-rpc-框架深度解析"><span><strong>第三部分 框架篇：主流 RPC 框架深度解析</strong></span></a></h2><ol start="9"><li><p><strong>Dubbo 深入解析</strong></p><ul><li>架构设计与核心模块</li><li>Dubbo 的协议、注册中心、SPI 机制</li><li>Dubbo 的服务治理能力</li><li>Dubbo3 与 Triple 协议</li></ul></li><li><p><strong>gRPC 深入解析</strong></p><ul><li>Protocol Buffers 详解</li><li>gRPC 的多语言支持</li><li>gRPC 的流式通信与双向流</li><li>gRPC 在云原生中的应用（Envoy / Istio 集成）</li></ul></li><li><p><strong>Spring Cloud OpenFeign</strong></p><ul><li>与 REST 的结合</li><li>与 Ribbon、Eureka、Hystrix 的整合</li><li>适合场景与局限性</li></ul></li><li><p><strong>其他 RPC 框架简析</strong></p><ul><li>Thrift</li><li>Motan</li><li>SOFARPC</li><li>RSocket</li></ul></li></ol><hr><h2 id="第四部分-高级篇-rpc-框架设计的深水区" tabindex="-1"><a class="header-anchor" href="#第四部分-高级篇-rpc-框架设计的深水区"><span><strong>第四部分 高级篇：RPC 框架设计的深水区</strong></span></a></h2><ol start="13"><li><p><strong>性能优化</strong></p><ul><li>连接池与长连接</li><li>零拷贝与 Netty 优化</li><li>批量请求与压缩</li></ul></li><li><p><strong>安全与认证</strong></p><ul><li>TLS/SSL 加密</li><li>Token 鉴权与 OAuth2</li><li>mTLS 双向认证</li></ul></li><li><p><strong>分布式事务与一致性</strong></p><ul><li>RPC 中的事务挑战</li><li>TCC、Saga、XA 模式</li><li>Seata 等事务框架集成</li></ul></li><li><p><strong>跨语言与多协议支持</strong></p><ul><li>如何支持 Java / Go / Python 跨语言调用</li><li>REST + RPC 混合架构设计</li><li>HTTP/2、QUIC 在 RPC 中的应用</li></ul></li></ol><hr><h2 id="第五部分-实践篇-rpc-在生产环境的落地" tabindex="-1"><a class="header-anchor" href="#第五部分-实践篇-rpc-在生产环境的落地"><span><strong>第五部分 实践篇：RPC 在生产环境的落地</strong></span></a></h2><ol start="17"><li><p><strong>服务治理</strong></p><ul><li>注册中心与配置中心集成</li><li>服务版本控制与灰度发布</li><li>服务降级与熔断策略</li></ul></li><li><p><strong>监控与可观测性</strong></p><ul><li>日志埋点</li><li>分布式链路追踪（Zipkin / SkyWalking / OpenTelemetry）</li><li>性能指标与告警</li></ul></li><li><p><strong>案例：电商系统中的 RPC 应用</strong></p><ul><li>商品、订单、支付服务调用链设计</li><li>高并发下的 RPC 调优</li><li>容灾与多机房部署</li></ul></li></ol><hr><h2 id="第六部分-展望篇-rpc-的未来" tabindex="-1"><a class="header-anchor" href="#第六部分-展望篇-rpc-的未来"><span><strong>第六部分 展望篇：RPC 的未来</strong></span></a></h2><ol start="20"><li><p><strong>云原生与 Service Mesh</strong></p><ul><li>RPC 与 Service Mesh 的关系</li><li>Sidecar 模式取代 SDK？</li><li>Istio/Linkerd 与 gRPC 的结合</li></ul></li><li><p><strong>Serverless 与无边界 RPC</strong></p><ul><li>FaaS 下的远程调用</li><li>事件驱动与 RPC 的融合</li></ul></li><li><p><strong>总结与展望</strong></p><ul><li>RPC 的发展趋势</li><li>开发者学习路径</li><li>从工程师到架构师的 RPC 思维</li></ul></li></ol><hr><p>📌 <strong>特色设计</strong>：</p><ul><li>每个章节配 <strong>原理 + 代码实现 + 案例</strong>，读者可以手写一个小型 RPC 框架，再对比 Dubbo/gRPC。</li><li>书分层次，入门的人可以看前两部分，进阶的人重点看第三、四部分。</li></ul>',23)])])}const g=i(o,[["render",s]]),u=JSON.parse('{"path":"/posts/rpc/index-desc.html","title":"《RPC 框架：从入门到精通》目录","lang":"zh-CN","frontmatter":{"description":"如果专门写一本 《RPC 框架：从入门到精通》 的书，可以分为 基础概念 → 手写实现 → 常见框架 → 高级特性 → 实践案例 → 未来发展 六个大模块。下面给你一个详细的章节目录： 《RPC 框架：从入门到精通》目录 第一部分 基础篇：走进 RPC 什么是 RPC？ RPC 的定义与作用 与本地调用的区别 RPC vs REST vs gRPC 对...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《RPC 框架：从入门到精通》目录\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-01T14:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/lmxxf-thinking/posts/rpc/index-desc.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"《RPC 框架：从入门到精通》目录"}],["meta",{"property":"og:description","content":"如果专门写一本 《RPC 框架：从入门到精通》 的书，可以分为 基础概念 → 手写实现 → 常见框架 → 高级特性 → 实践案例 → 未来发展 六个大模块。下面给你一个详细的章节目录： 《RPC 框架：从入门到精通》目录 第一部分 基础篇：走进 RPC 什么是 RPC？ RPC 的定义与作用 与本地调用的区别 RPC vs REST vs gRPC 对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T14:56:59.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T14:56:59.000Z"}]]},"git":{"createdTime":1756738619000,"updatedTime":1756738619000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.16,"words":949},"filePathRelative":"posts/rpc/index-desc.md","excerpt":"<p>如果专门写一本 <strong>《RPC 框架：从入门到精通》</strong> 的书，可以分为 <strong>基础概念 → 手写实现 → 常见框架 → 高级特性 → 实践案例 → 未来发展</strong> 六个大模块。下面给你一个详细的章节目录：</p>\\n<hr>\\n<h1><strong>《RPC 框架：从入门到精通》目录</strong></h1>\\n<h2><strong>第一部分 基础篇：走进 RPC</strong></h2>\\n<ol>\\n<li>\\n<p><strong>什么是 RPC？</strong></p>\\n<ul>\\n<li>RPC 的定义与作用</li>\\n<li>与本地调用的区别</li>\\n<li>RPC vs REST vs gRPC 对比</li>\\n<li>为什么微服务必须依赖 RPC</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>RPC 的核心组成</strong></p>\\n<ul>\\n<li>客户端与服务端模型</li>\\n<li>序列化与反序列化</li>\\n<li>网络通信协议</li>\\n<li>服务发现与负载均衡</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>RPC 的应用场景</strong></p>\\n<ul>\\n<li>分布式系统中的位置</li>\\n<li>电商、支付、日志、推荐中的实践</li>\\n<li>什么时候适合用 RPC，什么时候用 MQ 或 REST</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{g as comp,u as data};
