import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as t,o as s}from"./app-DYtQWKw3.js";const n={};function r(o,l){return s(),e("div",null,[...l[0]||(l[0]=[t('<h2 id="《分布式缓存-从入门到精通》" tabindex="-1"><a class="header-anchor" href="#《分布式缓存-从入门到精通》"><span>《分布式缓存：从入门到精通》</span></a></h2><h3 id="第一篇-基础篇-——-认识分布式缓存" tabindex="-1"><a class="header-anchor" href="#第一篇-基础篇-——-认识分布式缓存"><span><strong>第一篇：基础篇 —— 认识分布式缓存</strong></span></a></h3><ol><li><p><strong>第1章 缓存的基本概念</strong></p><ul><li>为什么需要缓存</li><li>缓存的适用场景与风险</li><li>本地缓存 vs 分布式缓存</li><li>缓存的优势与挑战</li></ul></li><li><p><strong>第2章 分布式缓存的核心原理</strong></p><ul><li>分布式架构下的缓存需求</li><li>CAP 定理与缓存系统的权衡</li><li>一致性哈希与节点分片</li><li>缓存与数据库的关系</li></ul></li><li><p><strong>第3章 常见分布式缓存选型</strong></p><ul><li>Memcached：轻量级高速缓存</li><li>Redis：全能型缓存数据库</li><li>Tair / Couchbase / Aerospike 简介</li><li>如何进行缓存技术选型</li></ul></li></ol><hr><h3 id="第二篇-应用篇-——-缓存的正确使用方式" tabindex="-1"><a class="header-anchor" href="#第二篇-应用篇-——-缓存的正确使用方式"><span><strong>第二篇：应用篇 —— 缓存的正确使用方式</strong></span></a></h3><ol start="4"><li><p><strong>第4章 缓存模式与设计策略</strong></p><ul><li>Cache Aside（旁路缓存模式）</li><li>Read Through / Write Through</li><li>Write Behind / Write Back</li><li>分布式缓存的读写一致性问题</li></ul></li><li><p><strong>第5章 缓存的失效与更新策略</strong></p><ul><li>缓存过期时间（TTL）与主动刷新</li><li>定时更新 vs 延迟更新</li><li>热点数据与长尾数据的处理</li><li>缓存更新的正确姿势</li></ul></li><li><p><strong>第6章 缓存与数据库一致性</strong></p><ul><li>强一致性 vs 最终一致性</li><li>缓存与数据库双写问题</li><li>Cache + DB 双写一致性解决方案</li><li>基于消息队列的最终一致性方案</li></ul></li></ol><hr><h3 id="第三篇-实战篇-——-深入-redis-与-memcached" tabindex="-1"><a class="header-anchor" href="#第三篇-实战篇-——-深入-redis-与-memcached"><span><strong>第三篇：实战篇 —— 深入 Redis 与 Memcached</strong></span></a></h3><ol start="7"><li><p><strong>第7章 Redis 基础与核心数据结构</strong></p><ul><li>String、List、Hash、Set、SortedSet</li><li>常见使用场景（计数器、排行榜、会话存储）</li><li>事务与 Lua 脚本</li></ul></li><li><p><strong>第8章 Redis 高级特性与扩展</strong></p><ul><li>Redis 持久化（RDB、AOF）</li><li>Redis 发布订阅与 Stream</li><li>Redis 模块（Bloom Filter、RedisJSON、Search）</li><li>Redis Cluster 原理与应用</li></ul></li><li><p><strong>第9章 Memcached 实战</strong></p><ul><li>架构与工作原理</li><li>内存管理与 LRU 淘汰策略</li><li>与 Redis 的对比与结合使用</li></ul></li></ol><hr><h3 id="第四篇-高阶篇-——-分布式缓存的挑战与优化" tabindex="-1"><a class="header-anchor" href="#第四篇-高阶篇-——-分布式缓存的挑战与优化"><span><strong>第四篇：高阶篇 —— 分布式缓存的挑战与优化</strong></span></a></h3><ol start="10"><li><p><strong>第10章 缓存穿透、雪崩与击穿</strong></p><ul><li>缓存穿透的原因与防御（布隆过滤器、缓存空值）</li><li>缓存雪崩的应对策略（过期时间错峰、热点保护）</li><li>缓存击穿与热点 Key 的处理方式</li></ul></li><li><p><strong>第11章 缓存高可用与扩展性</strong></p><ul><li>主从复制与哨兵机制</li><li>Cluster 分片机制与一致性哈希</li><li>多活与跨机房容灾</li><li>云上缓存（AWS Elasticache、阿里云 Redis）</li></ul></li><li><p><strong>第12章 缓存性能优化与监控</strong></p><ul><li>QPS、延迟与内存利用率优化</li><li>慢查询与大 Key 问题</li><li>缓存预热与降级策略</li><li>缓存系统监控与告警（Prometheus、Grafana）</li></ul></li></ol><hr><h3 id="第五篇-架构篇-——-缓存在大规模分布式系统中的实践" tabindex="-1"><a class="header-anchor" href="#第五篇-架构篇-——-缓存在大规模分布式系统中的实践"><span><strong>第五篇：架构篇 —— 缓存在大规模分布式系统中的实践</strong></span></a></h3><ol start="13"><li><p><strong>第13章 缓存在微服务架构中的应用</strong></p><ul><li>API 网关与缓存</li><li>分布式 Session 管理</li><li>配合服务注册中心的缓存优化</li></ul></li><li><p><strong>第14章 缓存与其他中间件的协同</strong></p><ul><li>缓存 + 消息队列</li><li>缓存 + 搜索引擎（Elasticsearch）</li><li>缓存 + 数据仓库（OLAP / OLTP 混合架构）</li></ul></li><li><p><strong>第15章 企业级缓存架构设计案例</strong></p><ul><li>电商秒杀场景</li><li>社交网络 Feed 流场景</li><li>金融实时风控场景</li><li>游戏排行榜场景</li></ul></li></ol><hr><h3 id="第六篇-未来篇-——-缓存的演进与趋势" tabindex="-1"><a class="header-anchor" href="#第六篇-未来篇-——-缓存的演进与趋势"><span><strong>第六篇：未来篇 —— 缓存的演进与趋势</strong></span></a></h3><ol start="16"><li><p><strong>第16章 新一代缓存技术趋势</strong></p><ul><li>Serverless 缓存</li><li>多级缓存（L1 + L2 + CDN）</li><li>内存 + 存储一体化缓存（Redis on Flash）</li><li>AI 辅助缓存预测与自适应调度</li></ul></li><li><p><strong>第17章 总结与实践路线图</strong></p><ul><li>缓存学习路径回顾</li><li>从开发者到架构师的成长路线</li><li>推荐的学习资源与社区</li></ul></li></ol>',18)])])}const h=i(n,[["render",r]]),c=JSON.parse('{"path":"/posts/cache/index-desc.html","title":"","lang":"zh-CN","frontmatter":{"description":"《分布式缓存：从入门到精通》 第一篇：基础篇 —— 认识分布式缓存 第1章 缓存的基本概念 为什么需要缓存 缓存的适用场景与风险 本地缓存 vs 分布式缓存 缓存的优势与挑战 第2章 分布式缓存的核心原理 分布式架构下的缓存需求 CAP 定理与缓存系统的权衡 一致性哈希与节点分片 缓存与数据库的关系 第3章 常见分布式缓存选型 Memcached：轻量...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-01T14:56:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-middleware/posts/cache/index-desc.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:description","content":"《分布式缓存：从入门到精通》 第一篇：基础篇 —— 认识分布式缓存 第1章 缓存的基本概念 为什么需要缓存 缓存的适用场景与风险 本地缓存 vs 分布式缓存 缓存的优势与挑战 第2章 分布式缓存的核心原理 分布式架构下的缓存需求 CAP 定理与缓存系统的权衡 一致性哈希与节点分片 缓存与数据库的关系 第3章 常见分布式缓存选型 Memcached：轻量..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T14:56:59.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T14:56:59.000Z"}]]},"git":{"createdTime":1756738619000,"updatedTime":1756738619000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":3.02,"words":906},"filePathRelative":"posts/cache/index-desc.md","excerpt":"<h2>《分布式缓存：从入门到精通》</h2>\\n<h3><strong>第一篇：基础篇 —— 认识分布式缓存</strong></h3>\\n<ol>\\n<li>\\n<p><strong>第1章 缓存的基本概念</strong></p>\\n<ul>\\n<li>为什么需要缓存</li>\\n<li>缓存的适用场景与风险</li>\\n<li>本地缓存 vs 分布式缓存</li>\\n<li>缓存的优势与挑战</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>第2章 分布式缓存的核心原理</strong></p>\\n<ul>\\n<li>分布式架构下的缓存需求</li>\\n<li>CAP 定理与缓存系统的权衡</li>\\n<li>一致性哈希与节点分片</li>\\n<li>缓存与数据库的关系</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>第3章 常见分布式缓存选型</strong></p>\\n<ul>\\n<li>Memcached：轻量级高速缓存</li>\\n<li>Redis：全能型缓存数据库</li>\\n<li>Tair / Couchbase / Aerospike 简介</li>\\n<li>如何进行缓存技术选型</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{h as comp,c as data};
