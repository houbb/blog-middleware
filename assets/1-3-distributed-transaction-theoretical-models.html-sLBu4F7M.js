import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as e}from"./app-BEwSPBqv.js";const r={};function i(o,a){return e(),t("div",null,[...a[0]||(a[0]=[n('<h1 id="分布式事务的理论模型-从2pc到base理论的全面解析" tabindex="-1"><a class="header-anchor" href="#分布式事务的理论模型-从2pc到base理论的全面解析"><span>分布式事务的理论模型：从2PC到BASE理论的全面解析</span></a></h1><p>在前两章中，我们了解了分布式事务的基本概念、重要性以及面临的挑战。要解决这些挑战，我们需要深入理解分布式事务的理论模型。本章将详细介绍几种重要的分布式事务理论模型，包括经典的两阶段提交（2PC）、改进的三阶段提交（3PC）、一致性协议（Paxos/Raft）以及BASE理论。</p><h2 id="二阶段提交-2pc" tabindex="-1"><a class="header-anchor" href="#二阶段提交-2pc"><span>二阶段提交（2PC）</span></a></h2><h3 id="_2pc的基本原理" tabindex="-1"><a class="header-anchor" href="#_2pc的基本原理"><span>2PC的基本原理</span></a></h3><p>两阶段提交（Two-Phase Commit，2PC）是最经典的分布式事务协议，它通过引入一个协调者（Coordinator）来协调所有参与者（Participants）的事务操作。</p><h4 id="第一阶段-准备阶段-prepare-phase" tabindex="-1"><a class="header-anchor" href="#第一阶段-准备阶段-prepare-phase"><span>第一阶段：准备阶段（Prepare Phase）</span></a></h4><ol><li><strong>事务发起</strong>：客户端向协调者发起事务请求</li><li><strong>准备请求</strong>：协调者向所有参与者发送准备请求，询问是否可以提交事务</li><li><strong>执行准备</strong>：每个参与者执行事务操作，但不提交，将操作写入日志</li><li><strong>响应准备</strong>：参与者向协调者发送准备响应（同意或拒绝）</li></ol><h4 id="第二阶段-提交阶段-commit-phase" tabindex="-1"><a class="header-anchor" href="#第二阶段-提交阶段-commit-phase"><span>第二阶段：提交阶段（Commit Phase）</span></a></h4><p>根据参与者的响应，协调者做出决策：</p><ul><li><strong>提交决策</strong>：如果所有参与者都同意提交，协调者发送提交请求</li><li><strong>回滚决策</strong>：如果有任何一个参与者拒绝，协调者发送回滚请求</li><li><strong>执行操作</strong>：参与者根据协调者的请求执行提交或回滚操作</li><li><strong>完成确认</strong>：参与者向协调者发送完成确认</li></ul><h3 id="_2pc的优缺点" tabindex="-1"><a class="header-anchor" href="#_2pc的优缺点"><span>2PC的优缺点</span></a></h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h4><ol><li><strong>强一致性</strong>：能够保证分布式事务的ACID特性</li><li><strong>实现简单</strong>：协议逻辑清晰，易于理解和实现</li><li><strong>广泛应用</strong>：被许多数据库和中间件采用</li></ol><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h4><ol><li><strong>同步阻塞</strong>：在等待响应期间，所有参与者都处于阻塞状态</li><li><strong>单点故障</strong>：协调者故障可能导致整个事务无法完成</li><li><strong>数据不一致</strong>：在某些异常情况下可能出现数据不一致</li></ol><h3 id="_2pc的异常处理" tabindex="-1"><a class="header-anchor" href="#_2pc的异常处理"><span>2PC的异常处理</span></a></h3><h4 id="协调者故障" tabindex="-1"><a class="header-anchor" href="#协调者故障"><span>协调者故障</span></a></h4><p>当协调者在发送提交请求前故障时，参与者会一直处于等待状态。解决方案包括：</p><ul><li><strong>超时机制</strong>：参与者等待超时后主动询问其他参与者状态</li><li><strong>选举机制</strong>：通过选举产生新的协调者</li></ul><h4 id="参与者故障" tabindex="-1"><a class="header-anchor" href="#参与者故障"><span>参与者故障</span></a></h4><p>当参与者在执行过程中故障时，可能需要通过日志恢复：</p><ul><li><strong>重做日志</strong>：重新执行已记录的操作</li><li><strong>撤销日志</strong>：回滚已记录的操作</li></ul><h2 id="三阶段提交-3pc" tabindex="-1"><a class="header-anchor" href="#三阶段提交-3pc"><span>三阶段提交（3PC）</span></a></h2><h3 id="_3pc的设计思路" tabindex="-1"><a class="header-anchor" href="#_3pc的设计思路"><span>3PC的设计思路</span></a></h3><p>三阶段提交（Three-Phase Commit，3PC）是对2PC的改进，通过增加一个预提交阶段来减少阻塞时间，提高系统的可用性。</p><h4 id="三个阶段详解" tabindex="-1"><a class="header-anchor" href="#三个阶段详解"><span>三个阶段详解</span></a></h4><ol><li><p><strong>CanCommit阶段</strong>：</p><ul><li>协调者向所有参与者发送CanCommit请求，询问是否可以执行事务</li><li>参与者根据自身状态回复Yes或No</li><li>如果有任何参与者回复No，协调者发送Abort请求终止事务</li></ul></li><li><p><strong>PreCommit阶段</strong>：</p><ul><li>协调者向所有参与者发送PreCommit请求</li><li>参与者执行事务操作，写入Undo/Redo日志</li><li>参与者回复PreCommit响应</li></ul></li><li><p><strong>DoCommit阶段</strong>：</p><ul><li>协调者发送DoCommit请求</li><li>参与者正式提交事务</li><li>参与者发送完成确认</li></ul></li></ol><h3 id="_3pc的优势" tabindex="-1"><a class="header-anchor" href="#_3pc的优势"><span>3PC的优势</span></a></h3><ol><li><strong>减少阻塞时间</strong>：通过预提交阶段减少参与者阻塞时间</li><li><strong>提高可用性</strong>：在某些故障情况下能够继续提供服务</li><li><strong>降低不一致风险</strong>：减少了数据不一致的可能性</li></ol><h3 id="_3pc的局限性" tabindex="-1"><a class="header-anchor" href="#_3pc的局限性"><span>3PC的局限性</span></a></h3><ol><li><strong>复杂性增加</strong>：协议复杂度比2PC高</li><li><strong>性能开销</strong>：需要更多的网络通信和状态维护</li><li><strong>仍存在单点故障</strong>：协调者故障仍然是主要风险</li></ol><h2 id="paxos一致性协议" tabindex="-1"><a class="header-anchor" href="#paxos一致性协议"><span>Paxos一致性协议</span></a></h2><h3 id="paxos的基本概念" tabindex="-1"><a class="header-anchor" href="#paxos的基本概念"><span>Paxos的基本概念</span></a></h3><p>Paxos是分布式系统中最重要的共识算法之一，由Leslie Lamport提出。它解决了在不可靠网络环境中如何就某个值达成一致的问题。</p><h3 id="paxos的角色定义" tabindex="-1"><a class="header-anchor" href="#paxos的角色定义"><span>Paxos的角色定义</span></a></h3><ol><li><strong>Proposer（提议者）</strong>：提出提案的节点</li><li><strong>Acceptor（接受者）</strong>：接受或拒绝提案的节点</li><li><strong>Learner（学习者）</strong>：学习最终决议的节点</li></ol><h3 id="paxos的执行流程" tabindex="-1"><a class="header-anchor" href="#paxos的执行流程"><span>Paxos的执行流程</span></a></h3><h4 id="prepare阶段" tabindex="-1"><a class="header-anchor" href="#prepare阶段"><span>Prepare阶段</span></a></h4><ol><li>Proposer选择一个提案编号n，向大多数Acceptors发送Prepare请求</li><li>Acceptors如果收到的n大于之前见过的任何提案编号，则回复Promise消息，承诺不再接受编号小于n的提案</li></ol><h4 id="accept阶段" tabindex="-1"><a class="header-anchor" href="#accept阶段"><span>Accept阶段</span></a></h4><ol><li>如果Proposer收到大多数Acceptors的Promise响应，则向这些Acceptors发送Accept请求</li><li>Acceptors如果未违背Promise承诺，则接受该提案并回复Accepted消息</li></ol><h4 id="learn阶段" tabindex="-1"><a class="header-anchor" href="#learn阶段"><span>Learn阶段</span></a></h4><ol><li>Learners通过某种机制学习到被接受的提案</li><li>当大多数Acceptors接受了同一个提案时，该提案就被选定</li></ol><h3 id="paxos的特点" tabindex="-1"><a class="header-anchor" href="#paxos的特点"><span>Paxos的特点</span></a></h3><h4 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h4><ol><li><strong>安全性</strong>：保证不会出现不一致的决议</li><li><strong>活性</strong>：在大多数节点正常工作时能够达成共识</li><li><strong>容错性</strong>：能够容忍少数节点故障</li></ol><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h4><ol><li><strong>复杂性</strong>：理解和实现都比较复杂</li><li><strong>性能</strong>：需要多轮通信，延迟较高</li><li><strong>活锁问题</strong>：在某些情况下可能出现活锁</li></ol><h2 id="raft一致性协议" tabindex="-1"><a class="header-anchor" href="#raft一致性协议"><span>Raft一致性协议</span></a></h2><h3 id="raft的设计目标" tabindex="-1"><a class="header-anchor" href="#raft的设计目标"><span>Raft的设计目标</span></a></h3><p>Raft是为了解决Paxos难以理解而设计的一致性算法，它通过更强的约束来减少需要考虑的状态，使得算法更易于理解和实现。</p><h3 id="raft的核心概念" tabindex="-1"><a class="header-anchor" href="#raft的核心概念"><span>Raft的核心概念</span></a></h3><h4 id="节点状态" tabindex="-1"><a class="header-anchor" href="#节点状态"><span>节点状态</span></a></h4><ol><li><strong>Leader（领导者）</strong>：处理所有客户端请求</li><li><strong>Follower（跟随者）</strong>：响应Leader和Candidate的请求</li><li><strong>Candidate（候选者）</strong>：参与选举的节点</li></ol><h4 id="任期概念" tabindex="-1"><a class="header-anchor" href="#任期概念"><span>任期概念</span></a></h4><ul><li>每个任期从选举开始，可能以选举新Leader结束</li><li>任期编号单调递增</li><li>每个节点在任期内最多投票一次</li></ul><h3 id="raft的工作流程" tabindex="-1"><a class="header-anchor" href="#raft的工作流程"><span>Raft的工作流程</span></a></h3><h4 id="选举过程" tabindex="-1"><a class="header-anchor" href="#选举过程"><span>选举过程</span></a></h4><ol><li><strong>超时触发</strong>：Follower在选举超时后成为Candidate</li><li><strong>发起选举</strong>：Candidate增加任期编号，投自己一票，向其他节点发送请求投票消息</li><li><strong>投票响应</strong>：其他节点根据规则决定是否投票</li><li><strong>选举结果</strong>： <ul><li>获得大多数选票：成为Leader</li><li>未获得多数票：保持Candidate状态</li><li>收到新Leader消息：变回Follower</li></ul></li></ol><h4 id="日志复制" tabindex="-1"><a class="header-anchor" href="#日志复制"><span>日志复制</span></a></h4><ol><li><strong>客户端请求</strong>：客户端请求发送到Leader</li><li><strong>日志追加</strong>：Leader将请求作为新条目追加到日志中</li><li><strong>日志复制</strong>：Leader并行向Follower发送追加条目消息</li><li><strong>提交确认</strong>：当条目被大多数节点复制后，Leader提交该条目</li><li><strong>状态机执行</strong>：Leader和Follower按顺序将提交的条目应用到状态机</li></ol><h3 id="raft的优势" tabindex="-1"><a class="header-anchor" href="#raft的优势"><span>Raft的优势</span></a></h3><ol><li><strong>易于理解</strong>：相比Paxos更易于理解和实现</li><li><strong>清晰的职责分离</strong>：选举、日志复制和安全性有明确的分离</li><li><strong>广泛采用</strong>：被Etcd、Consul等系统采用</li></ol><h2 id="base理论与最终一致性" tabindex="-1"><a class="header-anchor" href="#base理论与最终一致性"><span>BASE理论与最终一致性</span></a></h2><h3 id="base理论概述" tabindex="-1"><a class="header-anchor" href="#base理论概述"><span>BASE理论概述</span></a></h3><p>BASE理论是对CAP定理中一致性和可用性权衡的结果，它是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。</p><h3 id="base的核心概念" tabindex="-1"><a class="header-anchor" href="#base的核心概念"><span>BASE的核心概念</span></a></h3><h4 id="基本可用-basically-available" tabindex="-1"><a class="header-anchor" href="#基本可用-basically-available"><span>基本可用（Basically Available）</span></a></h4><p>系统在出现故障时，允许损失部分可用性，但仍然保证核心功能可用。例如：</p><ul><li>响应时间延长</li><li>功能降级</li><li>限流措施</li></ul><h4 id="软状态-soft-state" tabindex="-1"><a class="header-anchor" href="#软状态-soft-state"><span>软状态（Soft state）</span></a></h4><p>系统中的数据状态可以在一段时间内不同步，允许存在中间状态。</p><h4 id="最终一致性-eventually-consistent" tabindex="-1"><a class="header-anchor" href="#最终一致性-eventually-consistent"><span>最终一致性（Eventually consistent）</span></a></h4><p>系统经过一段时间后，数据最终会达到一致状态。</p><h3 id="最终一致性模型" tabindex="-1"><a class="header-anchor" href="#最终一致性模型"><span>最终一致性模型</span></a></h3><h4 id="因果一致性-causal-consistency" tabindex="-1"><a class="header-anchor" href="#因果一致性-causal-consistency"><span>因果一致性（Causal consistency）</span></a></h4><p>如果操作A在操作B之前发生，那么所有节点都应该看到A在B之前。</p><h4 id="读写一致性-read-your-writes-consistency" tabindex="-1"><a class="header-anchor" href="#读写一致性-read-your-writes-consistency"><span>读写一致性（Read-your-writes consistency）</span></a></h4><p>用户一旦执行了写操作，后续的读操作都应该能看到该写操作的结果。</p><h4 id="会话一致性-session-consistency" tabindex="-1"><a class="header-anchor" href="#会话一致性-session-consistency"><span>会话一致性（Session consistency）</span></a></h4><p>在一个会话中，用户能看到自己之前的写操作结果。</p><h4 id="单调读一致性-monotonic-read-consistency" tabindex="-1"><a class="header-anchor" href="#单调读一致性-monotonic-read-consistency"><span>单调读一致性（Monotonic read consistency）</span></a></h4><p>用户读取数据的顺序应该是单调的，不会出现回退。</p><h4 id="单调写一致性-monotonic-write-consistency" tabindex="-1"><a class="header-anchor" href="#单调写一致性-monotonic-write-consistency"><span>单调写一致性（Monotonic write consistency）</span></a></h4><p>用户的写操作应该按照顺序执行，不会出现乱序。</p><h3 id="base与acid的对比" tabindex="-1"><a class="header-anchor" href="#base与acid的对比"><span>BASE与ACID的对比</span></a></h3><table><thead><tr><th>特性</th><th>ACID</th><th>BASE</th></tr></thead><tbody><tr><td>原子性</td><td>强</td><td>弱</td></tr><tr><td>一致性</td><td>强</td><td>最终</td></tr><tr><td>隔离性</td><td>强</td><td>弱</td></tr><tr><td>持久性</td><td>强</td><td>弱</td></tr><tr><td>可用性</td><td>弱</td><td>强</td></tr><tr><td>性能</td><td>低</td><td>高</td></tr><tr><td>复杂度</td><td>高</td><td>低</td></tr></tbody></table><h2 id="理论模型的选择策略" tabindex="-1"><a class="header-anchor" href="#理论模型的选择策略"><span>理论模型的选择策略</span></a></h2><h3 id="根据业务场景选择" tabindex="-1"><a class="header-anchor" href="#根据业务场景选择"><span>根据业务场景选择</span></a></h3><h4 id="金融系统" tabindex="-1"><a class="header-anchor" href="#金融系统"><span>金融系统</span></a></h4><ul><li><strong>要求</strong>：强一致性、高可靠性</li><li><strong>推荐模型</strong>：2PC/3PC、Paxos/Raft</li><li><strong>理由</strong>：数据准确性至关重要，可以接受一定的性能损失</li></ul><h4 id="电商平台" tabindex="-1"><a class="header-anchor" href="#电商平台"><span>电商平台</span></a></h4><ul><li><strong>要求</strong>：高可用性、最终一致性可接受</li><li><strong>推荐模型</strong>：BASE理论、Saga模式</li><li><strong>理由</strong>：用户体验优先，允许短暂的数据不一致</li></ul><h4 id="社交网络" tabindex="-1"><a class="header-anchor" href="#社交网络"><span>社交网络</span></a></h4><ul><li><strong>要求</strong>：高可用性、高并发</li><li><strong>推荐模型</strong>：BASE理论、事件驱动架构</li><li><strong>理由</strong>：实时性要求相对较低，更注重用户体验</li></ul><h3 id="根据系统规模选择" tabindex="-1"><a class="header-anchor" href="#根据系统规模选择"><span>根据系统规模选择</span></a></h3><h4 id="小规模系统" tabindex="-1"><a class="header-anchor" href="#小规模系统"><span>小规模系统</span></a></h4><ul><li><strong>特点</strong>：节点数量少，网络环境相对稳定</li><li><strong>推荐模型</strong>：2PC</li><li><strong>理由</strong>：实现简单，能满足需求</li></ul><h4 id="中等规模系统" tabindex="-1"><a class="header-anchor" href="#中等规模系统"><span>中等规模系统</span></a></h4><ul><li><strong>特点</strong>：节点数量适中，对性能有一定要求</li><li><strong>推荐模型</strong>：3PC、Raft</li><li><strong>理由</strong>：在一致性和性能之间取得平衡</li></ul><h4 id="大规模系统" tabindex="-1"><a class="header-anchor" href="#大规模系统"><span>大规模系统</span></a></h4><ul><li><strong>特点</strong>：节点数量多，网络环境复杂</li><li><strong>推荐模型</strong>：BASE理论、事件驱动架构</li><li><strong>理由</strong>：优先保证系统可用性，接受最终一致性</li></ul><h2 id="实际应用案例" tabindex="-1"><a class="header-anchor" href="#实际应用案例"><span>实际应用案例</span></a></h2><h3 id="数据库集群" tabindex="-1"><a class="header-anchor" href="#数据库集群"><span>数据库集群</span></a></h3><p>在数据库集群中，通常使用Paxos或Raft协议来保证数据一致性：</p><ul><li><strong>MySQL Group Replication</strong>：基于Paxos协议</li><li><strong>MongoDB副本集</strong>：基于Raft协议的变种</li><li><strong>TiDB</strong>：基于Raft协议实现分布式事务</li></ul><h3 id="分布式存储系统" tabindex="-1"><a class="header-anchor" href="#分布式存储系统"><span>分布式存储系统</span></a></h3><p>在分布式存储系统中，通常采用最终一致性模型：</p><ul><li><strong>Amazon DynamoDB</strong>：基于最终一致性</li><li><strong>Cassandra</strong>：可调一致性模型</li><li><strong>HBase</strong>：强一致性模型</li></ul><h3 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h3><p>在消息队列中，通常需要在可靠性和性能之间权衡：</p><ul><li><strong>Kafka</strong>：通过副本机制保证数据可靠性</li><li><strong>RabbitMQ</strong>：支持事务和确认机制</li><li><strong>RocketMQ</strong>：支持分布式事务消息</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>分布式事务的理论模型为我们解决分布式系统中的一致性问题提供了基础。从经典的2PC到改进的3PC，从强一致性的Paxos/Raft到最终一致性的BASE理论，每种模型都有其适用场景和优缺点。</p><p>在实际应用中，我们需要根据业务需求、系统规模和性能要求来选择合适的理论模型。没有一种模型能够解决所有问题，我们需要在一致性、可用性和性能之间找到平衡点。</p><p>在后续章节中，我们将深入探讨基于这些理论模型的具体实现模式，如TCC、Saga等，以及主流的分布式事务框架，帮助你在实际项目中正确选择和应用这些理论模型。</p>',116)])])}const d=s(r,[["render",i]]),p=JSON.parse('{"path":"/posts/distributed-tx/1-3-distributed-transaction-theoretical-models.html","title":"分布式事务的理论模型：从2PC到BASE理论的全面解析","lang":"zh-CN","frontmatter":{"title":"分布式事务的理论模型：从2PC到BASE理论的全面解析","date":"2025-09-01T00:00:00.000Z","categories":["DisTx"],"tags":["dis-tx"],"published":true,"description":"分布式事务的理论模型：从2PC到BASE理论的全面解析 在前两章中，我们了解了分布式事务的基本概念、重要性以及面临的挑战。要解决这些挑战，我们需要深入理解分布式事务的理论模型。本章将详细介绍几种重要的分布式事务理论模型，包括经典的两阶段提交（2PC）、改进的三阶段提交（3PC）、一致性协议（Paxos/Raft）以及BASE理论。 二阶段提交（2PC）...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务的理论模型：从2PC到BASE理论的全面解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-09-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-01T15:07:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"老马啸西风\\",\\"url\\":\\"https://houbb.github.io\\"}]}"],["meta",{"property":"og:url","content":"https://houbb.github.io/blog-middleware/posts/distributed-tx/1-3-distributed-transaction-theoretical-models.html"}],["meta",{"property":"og:site_name","content":"老马啸西风"}],["meta",{"property":"og:title","content":"分布式事务的理论模型：从2PC到BASE理论的全面解析"}],["meta",{"property":"og:description","content":"分布式事务的理论模型：从2PC到BASE理论的全面解析 在前两章中，我们了解了分布式事务的基本概念、重要性以及面临的挑战。要解决这些挑战，我们需要深入理解分布式事务的理论模型。本章将详细介绍几种重要的分布式事务理论模型，包括经典的两阶段提交（2PC）、改进的三阶段提交（3PC）、一致性协议（Paxos/Raft）以及BASE理论。 二阶段提交（2PC）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-01T15:07:52.000Z"}],["meta",{"property":"article:tag","content":"dis-tx"}],["meta",{"property":"article:published_time","content":"2025-09-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-01T15:07:52.000Z"}]]},"git":{"createdTime":1756739272000,"updatedTime":1756739272000,"contributors":[{"name":"bbhou","username":"bbhou","email":"1557740299@qq.com","commits":1,"url":"https://github.com/bbhou"}]},"readingTime":{"minutes":9.65,"words":2894},"filePathRelative":"posts/distributed-tx/1-3-distributed-transaction-theoretical-models.md","excerpt":"\\n<p>在前两章中，我们了解了分布式事务的基本概念、重要性以及面临的挑战。要解决这些挑战，我们需要深入理解分布式事务的理论模型。本章将详细介绍几种重要的分布式事务理论模型，包括经典的两阶段提交（2PC）、改进的三阶段提交（3PC）、一致性协议（Paxos/Raft）以及BASE理论。</p>\\n<h2>二阶段提交（2PC）</h2>\\n<h3>2PC的基本原理</h3>\\n<p>两阶段提交（Two-Phase Commit，2PC）是最经典的分布式事务协议，它通过引入一个协调者（Coordinator）来协调所有参与者（Participants）的事务操作。</p>\\n<h4>第一阶段：准备阶段（Prepare Phase）</h4>","autoDesc":true}');export{d as comp,p as data};
